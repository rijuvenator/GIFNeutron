# Documention for Python modules.
# 
# Should be self-explanatory for the most part
# The first method listed is always the constructor
# Any arguments with an = are optional (defaults usually given); any without are mandatory
# 
# Syntax Highlighting:
! === MODULE ===
== Class
	* ~external members/methods
	- ~internal members/methods

# ##### DOCUMENTATION #####

! === MegaStruct ===
# MegaStruct classes for handling, filling, and organizing GIF, P5, and MC data
# 
# The *MegaStruct classes handle the meta-structure common to data of type *
# 
# For GIF data one can obtain any current/attenuation factor/luminosity
# in a systematic way with currentVector(), attVector(), and lumiVector()
# For P5 Data one can similarly obtain a luminosity (or function of)
# 
# The *Analyzer classes derive from the *MegaStruct classes, and provide
# a skeleton class for filling and retrieving specific data, per script
# 
# VALDATA, val, and valVector are provided by default for this purpose
# analyze() takes in a tree and executes once per "external data set"
# load() executes if F_DATAFILE is not None and allows retrieval, e.g. histograms
# 
# analyze(), load(), val(), and valVector() should almost certainly be overridden
# Overriding fillData() is permissible but should probably be avoided
# setup() and cleanup() are also provided for pre- and post-loop actions
# 
# ATTLIST, FFLIST, and RUNLIST allow control over which data to analyze
# ATT, MEAS, and RUN are provided for organizational purposes
# 
# PARAMS allows passing ANY kind of additional parameters to analyze() and load()
# It can be any type; since analyze() and load() are fully implemented externally,
# do as you will with PARAMS. It can be a flag, a file name, a whole class, whatever
# 
# Note that the tree is named GIFTree/GIFDigiTree for GIF, P5
# while it is named GIFTree/NeutronDigiTree for MC

_GLOBAL VARIABLES_
# Useful paths and file names -- import from MegaStruct to use
	* CMSSW_PATH
	* GITLAB_PATH
	* GIFDATA_PATH
	* P5DATA_PATH
	* MCDATA_PATH
	* F_GIFDATA    [requires .replace('XXXX',MEAS)]
	* F_P5DATA
	* F_MCDATA
	* F_MEASGRID
	* F_ATTENHUT
	* F_RUNGRID

# returns TYPE, OFN, and FDATA based on some command-line parameters
# set up a CONFIG dictionary with file names and pass it to this function
# then use the resulting output to construct the analyzers
# No more messing around with None and commenting file names and etc.
	* TYPE, OFN, FDATA = SetFileNames (CONFIG)

== GIFMegaStruct
_Class Members_
	- (dict) MEASDATA
	- (dict) CURRDATA

_Class Methods_
	* GIFMegaStruct               ()
	- GIFMegaStruct.fillMeas      ()
	- GIFMegaStruct.fillCurr      ()
	- GIFMegaStruct.current       (cham, meas)
	* GIFMegaStruct.attVector     (castrated=False)
	* GIFMegaStruct.currentVector (cham, ff, castrated=False)
	* GIFMegaStruct.lumiVector    (cham, ff, castrated=False)

== GIFAnalyzer(GIFMegaStruct)
_Class Members_
	- (dict)   VALDATA
	* (string) F_DATAFILE
	* (list)   ATTLIST
	* (list)   FFLIST
	* (float)  ATT
	* (int)    MEAS
	* ()       PARAMS

_Class Methods_
	* GIFAnalyzer             (F_DATAFILE=None, ATTLIST=None, FFLIST=0, PARAMS=None)
	* GIFAnalyzer.getMeaslist (ATT)
	- GIFAnalyzer.fillData    ()
	* GIFAnalyzer.val         (cham, meas)
	* GIFAnalyzer.valVector   (cham, ff)
	* GIFAnalyzer.analyze     (t, PARAMS)
	* GIFAnalyzer.load        (PARAMS)
	* GIFAnalyzer.setup       (PARAMS)
	* GIFAnalyzer.cleanup     (PARAMS)

== P5MegaStruct
_Class Members_
	- (dict) RUNLUMIDATA

_Class Methods_
	* P5MegaStruct               ()
	- P5MegaStruct.fillRunLumi   ()
	- P5MegaStruct.lumi          (run, ls)

== P5Analyzer(P5MegaStruct)
_Class Members_
	- (dict)   VALDATA
	* (string) F_DATAFILE
	* ()       PARAMS

_Class Methods_
	* P5Analyzer           (F_DATAFILE=None, PARAMS=None)
	- P5Analyzer.fillData  ()
	* P5Analyzer.analyze   (t, PARAMS)
	* P5Analyzer.load      (PARAMS)
	* P5Analyzer.setup     (PARAMS)
	* P5Analyzer.cleanup   (PARAMS)

== MCMegaStruct
_Class Members_

_Class Methods_
	* MCMegaStruct ()

== MCAnalyzer(MCMegaStruct)
_Class Members_
	- (dict)   VALDATA
	* (string) F_DATAFILE
	* ()       PARAMS

_Class Methods_
	* MCAnalyzer           (F_DATAFILE=None, PARAMS=None)
	- MCAnalyzer.fillData  ()
	* MCAnalyzer.analyze   (t, PARAMS)
	* MCAnalyzer.load      (PARAMS)
	* MCAnalyzer.setup     (PARAMS)
	* MCAnalyzer.cleanup   (PARAMS)
