# Documention for Python modules.
# 
# Should be self-explanatory for the most part
# The first method listed is always the constructor
# Any arguments with an = are optional (defaults usually given); any without are mandatory
# 
# Syntax Highlighting:
! === MODULE ===
== Class
	* ~external members/methods
	- ~internal members/methods

# ##### DOCUMENTATION #####

! === Plotter ===
# Plotter module contains the Plot, Legend, and Canvas classes
# Intended to be a general purpose plot and canvas handling module
# incorporating a flexible TDRStyle, convenient wrappers and automation

== Plot
_Class Members_
	* (TObject) plot
	* (string)  legName
	* (string)  legType
	* (string)  option

_Class Methods_
# axes is a string containing a possibly empty subset of 'XYZ'. All axes must exist.
	* Plot                   (plot, legName='hist', legType='felp', option='')
	* Plot.scaleTitles       (factor, axes='XY')
	* Plot.scaleLabels       (factor, axes='XY')
	* Plot.scaleTitleOffsets (factor, axes='XY')
	* Plot.setTitles         (X=None, Y=None, Z=None)

== Legend(TLegend)
_Class Members_
	* (TLegend) self
	* (int)     lines
	* (string)  corner

_Class Methods_
	* Legend                (X1, Y1, X2, Y2, corner)
	* Legend.addLegendEntry (Plot)
	* Legend.moveLegend     (X=0., Y=0.)
	* Legend.moveEdges      (L=0., R=0., T=0., B=0.)
	* Legend.resizeHeight   (scale=1.)

== Canvas(TCanvas)
_Class Members_
	* (TCanvas) self
	* (int)     cWidth
	* (int)     cHeight
	* (string)  fontcode
	* (float)   fontscale
	* (bool)    logy
	* (string)  lumi
	* (string)  extra
	* (float)   ratioFactor
	- (int)     font
	- (float)   fontsize
	- (TPad)    mainPad
	- (Legend)  legend
	- (bool)    axesDrawn
	- (TObject) firstPlot
	- (list)    plotList
	- (TPad)    ratPad
	- (TH1F)    rat
	- (TGraph)  gr

_Class Methods_
# I've omitted some uninteresting defaults from the constructor doc
# pos      is a 2 character string: 'tb'  + 'rl'
# align    is a 2 character string: 'bct' + 'lcr'
# fontcode is a string containing a possibly empty subset of 'bi'
# edges    is a string containing a possibly empty subset of 'LRTB'
	* Canvas                 (lumi=, extra=, logy=False, ratioFactor=0, cWidth=800, cHeight=600, fontcode=, fontscale=)
	* Canvas.addMainPlot     (Plot, addToPlotList=True)
	* Canvas.makeLegend      (lWidth=0.125, pos='tr', fontscale=1., autoOrder=True)
	* Canvas.setMaximum      ()
	* Canvas.addLegendEntry  (Plot)
	* Canvas.setFitBoxStyle  (owner, lWidth=0.3, lHeight=0.15, pos='tl', lOffset=0.05, fontscale=0.75)
	* Canvas.makeRatioPlot   (topHist, bottomHist, plusminus=0.5, option='', ytit='Data/MC', xtit='')
	* Canvas.makeTransparent ()
	* Canvas.moveExponent    ()
	* Canvas.makeExtraAxis   (xmin, xmax, Xmin=, Xmax=, Ymin=, Ymax=, Yoffset=, Yoffsetscale=0.23, title='', bMarginScale=) [returns axis]
	* Canvas.scaleMargins    (factor, edges='')
	* Canvas.drawText        (text='', pos=(0., 0.), align='bl', fontcode='', fontscale=1.)
	* Canvas.finishCanvas    ()
	* Canvas.save            (name, extList='')
	* Canvas.deleteCanvas    ()

`*** HOW TO USE THE PLOTTER MODULE ***`

	_1) Make Plots_
		* Plotter.[Plot](Object, legName, legType='felp', option)
		{binding decisions: none}
	_2) Make Canvas_
		* Plotter.[Canvas](lumi=, extra='Internal', logy=False, ratioFactor=0, cWidth=800, cHeight=600, fontcode=''(bi), fontscale=1)
		{binding decisions: cWidth, cHeight, ratioFactor}
	_3) Add Plots_
		* Plotter.Canvas.[addMainPlot](Plot, addToPlotList=True)
		{binding decisions: draw order}
	_4) Make Legend_
		* Plotter.Canvas.[makeLegend]    (lWidth=0.125, pos='tr', fontscale=1., autoOrder=True)
		* Plotter.Canvas.[addLegendEntry](Plot)
		{binding decisions: legend order (automation)}
		# Note: If making an extra axis and legend position is to be automatically calculated, make the axis and THEN make the legend.
	_5) Add additional structures_
		* Plotter.Canvas.[makeRatioPlot](topHist, bottomHist, plusminus=0.5, option='', ytit='Data/MC', xtit='')
		{binding decisions: topHist, bottomHist}
		* Plotter.Canvas.[makeExtraAxis](xmin, xmax, Xmin=, Xmax=, Ymin=, Ymax=, Yoffset=, Yoffsetscale=0.23, title='', bMarginScale=)
		{binding decisions: everything}
		# Note: changes pad margins
	_6) Apply cosmetics_
		* Anything involving sizes, positions, decorations, marker, line, and fill styles, etc.
		* Plotter.Canvas.[makeTransparent]()
		* Plotter.Canvas.[moveExponent]   ()
		* Plotter.Canvas.[scaleMargins]   (factor, edges=''(LRTB))
		* Plotter.Canvas.[drawText]       (text, pos=(0., 0.), align='bl', fontcode='', fontscale=1.)
		* Plotter.Canvas.[setFitBoxStyle] (owner, lWidth=0.3, lHeight=0.15, pos='tl', lOffset=0.05, fontscale=0.75)
	_7) Finish, Save, and Delete_
		* Plotter.Canvas.[finishCanvas]()
		* Plotter.Canvas.[save]        (name, extList='')
		* Plotter.Canvas.[deleteCanvas]()
